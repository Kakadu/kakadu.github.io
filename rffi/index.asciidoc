:source-highlighter: pygments
:pygments-style: monokai
:local-css-style: pastie

:toc:


Дополнительные материалы для отчета по гранту
=============================================

:Author: Dmitrii Kosarev a.k.a. Kakadu
:email:  Dmitrii.Kosarev@protonmail.ch


The variant of this report for english-speaking users is  link:index_eng.html[here].

В рамках работы было разработано несколько программных средств, на основе которых был построен компилятор языка LaMa. Вначале мы опишем инструкции для этих средств по-отдельности, затем для каждого пункта отчета мы подробнее расскажем, какая работы была проведена.

Все разработанные средства предназначаются для использования с компилятором OCaml версии 4.07.1 и должны устанаваливаться с помощью стандартного (для инфраструктуры OCaml) пакетного менеджера https://opam.ocaml.org[Opam] версии 2.x.




== Разработанные программные средства

[[GT]]
=== Расширяемые преобразования с помощью GT

GT -- это библиотека на основе обобщенного программирования для получения расширяемых преобразований типов данных. Исходный код доступен https://github.com/Kakadu/GT/tree/v0.3.0[на Github].
В неё входят:

* непосредственно библиотека времени выполнения;
* синтаксическое расщирение для Camlp5;
* синтаксическое расширение для PPX.

Установка доступна через Opam с помощью команды

`opam pin add GT git+https://github.com/Kakadu/GT\#v0.3.0`

Тесты и примеры находятся https://github.com/Kakadu/GT/tree/v0.3.0/regression[в репозитории], а подробные инструкции по установке и использованию https://github.com/Kakadu/GT/blob/v0.3.0/README.md[в README]. Отдельно хотим отметить https://github.com/Kakadu/GT/blob/v0.3.0/regression/test840garrique.ml[пример] на основе работы J.Garrique "Code reuse through polymorphic variants"

[[ostap]]
=== Синтаксический анализ с помощью Ostap

Был разработана библиотека для проведения синтаксического анализа с помощью парсер-комбинаторов, которая состоит из непосредственно библиотеки, и синтаксического расширения на основе Camlp5, которое облегчает написание парсеров. Исходный код для библиотеки с использованием мемоизации находится https://github.com/dboulytchev/ostap/tree/memoCPS[на GitHub]. Для её установки воспользуйтесь командой

`opam pin add ostap git@github.com:dboulytchev/ostap\#memoCPS`


Предыдущий вариант (без использования мемоизации) также доступен https://github.com/Kakadu/ostap/tree/master-very-old[на GitHub] и может быть полезен для сравнения производительности.



[[LaMa]]
=== Компилятор LaMa

Учебный компилятор, реализованный с использованием описанных выше подходов, находится https://github.com/JetBrains-Research/Lama[на GitHub]. Перед сборкой необходимо установить указанные выше библиотеки.

Для оценки синтаксического анализатора также был создана отдельная разновидность компилятора ССЫЛКА, на которой сравнение более репрезентативно

[NOTE]
Официально эти компиляторы частично приватные, то как именно мы будем их делать публичными вроде бы не обсуждалось. Когда обсудим, я пойму как правильно расставить ссылки.


== Отчет 1

=== Разработка предметно-ориентированного языка для описания синтаксических анализаторов

//, основанного на парсер-комбинаторах, и его реализация в виде синтаксического расширения для языка OCaml.

Задача реализована в рамках раздела <<ostap>>.


===  Доработка библиотеки программирования на основе управляемых типом преобразователей для языка OСaml

Разработка библиотеки, описанной в разделе <<GT>>, ведется с 2014 года. В рамках данной работы она была переработана и улучшена в следующих аспектах:

* Поддержка синонимов типов (type abbreviations).
* Поддержка синтаксических расширений на основе PPX.

=== (ДЮ) Создание общей концепции применения поверхностно-встроенных предметно-ориентированных языков для разработки языковых процессоров

=== Выполнение экспериментов и измерений.

==== Эксперименты с синтаксическим анализатором

В ходе проведения экспериментов были сравнены три подхода к синтаксическому анализу: LR анализ с помощью Menhir, LL с помощью парсер-комбинаторов и библиотеки Opal, и наш подход с помощью Ostap без использования мемоизации. Тестирование проводилось на сокращенной версии компилятороа LaMa (ССЫЛКА)

В ходе экспериментов было установлено, что Ostap показывает сходную с Opal производительность, Menhir работает существенно эффективнее, но обладает меньшей выразительной силой.

ССЫЛКА

// ==== 222

// Выполнение экспериментов и измерений.


== Отчет 2

=== Реализация компилятора, средств исследования, навигации и преобразования исходного кода на базе предложенных подходов и средств (для языка OCaml !?!?!?)

В рамках работы был разработан <<LaMa>>.

* средств исследования НЕТ (?), кроме быть может средств распечатки AST и форматтера
* навигации нет (и что имелось в виду я не очень понимаю?)
* преобразования исходного кода нет ( и я не очень пойму что понималось?)

=== Анализ производительности и эксперименты. Модификация концепции и методов.

В ходе исследования был разработан с помощью GT модуль для <<LaMa>>,  ответственный за форматирование кода, а также было произведено сравнение со стандартной реализацией без использования GT. Замеры показали, что наш подход работает примерно на 5% медленнее, из-за накладных расходов при использовании объектов языка OCaml. Преимуществом нашего подхода является возможность видоизменять форматтер, не переписывая его заново. С использованием этой возможности был реализован видоизмененный форматтер, который печатает инфиксные операции языка LaMa более удобным способом.

Тут будет ещё ССЫЛКА


=== Создание прототипов следующих языковых процессоров с использованием разработанного инструментария: синтаксического анализатора, форматтера, анализатора типов, средств анализа потока данных, оптимизирующих преобразований и генерации кода.

В рамках <<LaMa>> были разработано следующие средства:

* синактсический анализатор на основе Ostap (ССЫЛКА)
* форматтер (ССЫЛКА)
* средства анализа потока данных (А есть ли оно у нас?)
* оптимизирующие преобразования  (должны быть, ДЮ лучше знает)
* генерация кода в архитектуру x86

=== (К Антону/Жене) Исследование возможностей применения реляционного программирования к слабым моделям памяти

=== (К Антону/Жене) Разработка метода преобразования параллельных программ с эффектами слабых моделей памяти в зонтичную архитектуру современных процессоров.

ifdef::backend-docbook[]
[index]
Example Index
-------------
////////////////////////////////////////////////////////////////
The index is normally left completely empty, it's contents being
generated automatically by the DocBook toolchain.
////////////////////////////////////////////////////////////////
endif::backend-docbook[]
