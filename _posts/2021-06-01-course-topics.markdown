---
layout: post
title:  "Курсовые работы"
date:   2021-09-01
categories: teaching
permalink: /:year/topis
---

Тут должны быть перечислены темы и идеи курсовых (и т.п.) работы. Для отдельных направлений может иметься отдельная страница.

По некоторым темам консультантом буду выступать не только я. Темы могут быть завершены, сделаны частично или не начаты.

## Дооформленные

* Про Qt/QML
* OCaml + Embox
    https://usenix15.nqsb.io/
* Метрики кода для OCaml
    * Поднять старый код, который считает **цикломатическую сложность**
    * Придумать как считать метрику про связность функций в модулях (https://softwareengineering.stackexchange.com/questions/151004/)
    * Вот какая-то умная книга про метрики для Haskell: https://www.cs.kent.ac.uk/pubs/2004/2236/content.pdf
    * Камлисты в дискорде 08.08.2021 вечером это обсуждали, если что пинать их: @olle, @companion_cube, etc.

    https://www.dropbox.com/s/w946jn79odu6e32/taxonomy_280619.pdf?dl=0
    Статья "A Taxonomy of Metrics for Software Fault Prediction (2020)"

### miniKanren + Расписание

На матмехе беда с расписанием. Оно состовляется вручную, поэтому оно появляется с запозданием и не отличается качеством, так как очень тяжело учесть все пожелания студентов и преподователей. Также присутствует большое количество ограчений. Вот, например, некоторые из них:

* число обучающихся не должно превышать вместимость аудитории
* преподаватель не может одновременно вести занятия в двух разных аудиториях
* "окна" в расписании не желательны
* в день не может быть более 4х пар

В Лаборатории языковых инструментов JetBrains Research занимаются реляционным программированием на miniKanren, которое включается в себя область под названием **программирование в ограничениях**. По сути, это предметно-ориентированный язык, который позволяет удобно (хотя кто-то счиатет, что неудобно) писать переборные задачи с ограничениями. Предлагается либо взять оригинальный miniKanren для языков семейства Scheme, или лабораторный OCanren, встроенный в язык OCaml, и заняться сбором ограничений к расписанию на матмехе, а затем и автоматическим построением расписаний.

На первых порах miniKanren должно хватать. На данный момент он строго проверяет ограничения (если они нарушены, то он прерывает поиск в текущей ветке и ищет решение в другой) и отсутсвует возможность посчитать констрейнты "не очень важными".  Например 1: номинальная вместимость аудитории 20 человек; посадить 25 можно, но будет душновато; 30 уже никак нельзя, потому что будем сидеть на коленках друг друга или задохнемся. Пример 2: за каждой группой должна быть закреплена аудитория на день, но в здании недостаточно аудиторий для всех групп, поэтому 100% корректного расписания не может существовать; надо как-то позволить программисту указать, что для этих групп надо строго выполнять, на эти группы можно подзабить и т.п.

В общем и целом, сделать генератор расписания -- очень полезная учебная практика, относящаяся к классу "продуктовых". Не смотря на очевидную полезность, если в процессе работы существующая реализация miniKanren не будет как-то доделана/расширена/обогащена, то генератор расписания может выглядеть несколько слабой ВКР, и рисковать не стоит. В случае расширения выразительной мощи miniKanren рекомендуется написать и заслать англоязычную статью на miniKanren workshop (дедлайн в мае-июне), что формально засчитыается как выступление на конференции. Для полноценных публикаций стоит обратить внимание на отечественные площадки: SEIM, журнал "Вестник ИТМО" и т.п.

## Недооформленные

* Remake Turbo Vision
    * для 2го курса
    * Тема нужна для обучения проектированию GUI рективным способом.
    * предлагается взять OCaml+ncurses+[notty](https://github.com/pqwy/notty) и сделать поделку в стиле [Borland Turbo Vision](https://github.com/magiblot/tvision)
* про вывод типов с уровнями
    * тема для второго курса
    * надо реализовать навороченный почти линейный алгоритм вывода типов на основе работы Д.Реми и описания Олега
    * в текст работы должно попасть подробное понятняное описание алгоритма для новичков
    * оценивать текст надо на основе отзывов студентов разных курсов


#### Завершенные и полузавершенные

* Транслятор OCaml в Lua

#### Уже выданные

* Active patterns for OCaml
