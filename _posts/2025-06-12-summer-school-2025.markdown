---
layout: post
title: "Летняя школа 2025 на матмехе"
date: 2025-06-12
categories: teaching, russian
permalink: /2025/summer_school
---

Бытует мнение, что любой программист мечтает написать написать свой язык программирования, свою игру, и свой фреймворк для создания интерфейсов.
В этом проекте вы можете получить знания, чтобы закрыть первый гештальт.


**Проект**: учебный компилятор

#### Простой компилятор простого языка

может стать результатом работы летом.
Планируем начать с простого компилятора рекурсивного факториала/фибоначчи для RISC-V, а потом насытить язык другими фичами.
Разрабатывать можно примерно  на чем угодно.
Прошлогодние студенты ПИ массово взялись за изучение OCaml, потому что им его сдавать в осеннем семестре.
Была ещё группа, которая писала на С++, но показать работающий компилятор у них не получилось (в отличие от предыдущей группы студентов).

На эту ЛШ уже заявлен [подобный проект](https://github.com/Lamagraph/interaction-nets-in-fpga) от Григорьева/Кубышкина, где планируется доработка компилятора (написанного на Haskell) языка, который компилируется в ПЛИС, а не RISC-V.
Я не расстроюсь, если студенты захотят как-то совместить два проекта.
Пускай те, кто хотят писать на Haskell, пишут на Haskell; любители OCaml --- на OCaml; любители унылых языков --- на унылых языках.
Те, кому интересн RISC-V будут порождать код и запускать под QEMU; если ПЛИС --- так тому и быть.

{::comment}

Планируется создать простой компилятор "от печки" из следующих шагов:
* Синтаксический анализ (i.e. парсер) вручную рекурсивным спуском.
  Никаких грамматик в форме БНФ или генераторов парсеров для простого компилятора не нужно. (Вполне возможно, что для настоящего тоже не нужно :) ) Мук выбора при дизайне синтаксиса не будет, у всех будет один, заранее заготовленный, синтаксис.

  В принципе, можно эту часть сделать потом, или совсем пропустить, но тогда будет не очень удобно тестировать.
* Простое промежуточное представление.
  Скорее всего настолько простое, что вырожденное. Самым содержательным должно оказаться преобразование сложные арифметический выражений в простые, например, `x:=a*b+c` в `t1:=a*b; x:=t1*c`, но можно даже без этого.
* Простые оптимизации, или совсем без них.
  Например, упростить `x+y-x` в `y` для беззнаковых чисел.
* Максимально простое порождение инструкций (для базового RISC-V 64).
  Да, придется потратить немного времени на привыкание к ассемблеру, ~~чтобы не путать вход и выход у команд~~. Но в общем и целом для простого компилятора многого знать не надо: инструкции языка можно транслировать примерно одинаково независимо от контекста. Функции проблем не вызовут, во-первых, потому что их нет, но даже если есть, то можно даже не знать соглашения о вызовах, которые вам рассказывали на первом курсе.
  Если RISC V выглядит страшно, то можно брать тот ассемблер, что у вас в ноутбуке: для простых компиляторов существенной разницы нет.

{:/comment}

#### Мне скучно делать ещё один Паскаль....
Созданием компиляторов люди занимаются много лет, и сразу делать что-то современное --- сложно.
Поэтому тема формулируется в первую очередь как образовательная, а не промышленно применимая уже завтра.
Светлой целью (с) я вижу студентов, которые защищают изменения в компилятор [OCaml](https://github.com/ocaml/ocaml/pulls) как ВКР.
Чтобы дорасти до такого топового уровня можно...

* Доделывать игрушечный компилятор [ruKaml](https://github.com/Kakadu/rukaml) до настоящего OCaml, в том числе, чтобы можно было [грабить корованы](https://wikireality.ru/wiki/Грабить_корованы). Созданием альтернативных компиляторов известных языков занимался много кто (вот для [Си][6] и [Haskell][7]), для OCaml пока не вполне есть.
* Научить [ruKaml](https://github.com/Kakadu/rukaml) компилироваться в Interaction Nets (де факто заменять фронт компилятора [Lamagraph](https://github.com/Lamagraph/interaction-nets-in-fpga) с Haskell на OCaml).
* Скрещивать OCaml и Rust ([раз][1], [два][2] и [статья][3]).
* Добавлять топовые оптимизации ([статья 2023][5]).
* Делать синтаксический анализ с помощью SIMD.
* Ускорять OCaml под RISC-V (например, интринсиками в качестве [учебной практики][4]).
* Прикручивать к OCaml порождение кода с помощью LLVM (так, чтобы это было эффективнее, чем без LLVM, sic!).


#### Технологии

Во время школы вы познакомитесь со стандартными инструментами GNU/Linux: ассемблер и (кросс)компилятор `gcc`, отладчик `gdb`, эмулятор `qemu`.
Рекомендуется использование GNU/Linux, виндузятникам придется возиться с `WSL2` самостоятельно.
В принципе, написать простой компилятор можно на чем угодно.
Связываться с `C++` не хочу, потому что хочется сконцентрироваться на создании работающего компилятора, и не танцевать на граблях из сегфолтов.
Если в языке будут алгебраические типы данных (OCaml, другие функциональные или Rust), то будет легче.

#### Зачем оно студентам?

Очень полезно иметь представление о том, как работает компилятор, которым вы компилируете свои программы.
К тому же мы --- кафедра системного программирования, а не строительства сайтов.
После летней школы, темы компиляторов можно развивать в 100500 учебных практик.

#### Пожелания к кандидатам

* Любить сидеть в терминале GNU/Linux (на худой конец, в WSL).
* Основы представления данных: байт, бит, машинное слово, представление целых чисел, в перспрективе представление чисел с плавающей точкой.
* Представлять как компилируются программы на голом Си (понятия рантайма, объектного файла, линковки, умение из исполняемого файла получить его листинг ассемблера).
* Быть готовым не бояться ассемблера. Например, можно полистать начало этой [книжки](https://www.amazon.com/Low-Level-Programming-Assembly-Execution-Architecture/dp/1484224027).

{::comment}
#### Зачем оно Ядру?

Было бы неплохо, чтобы студенты имели общее представление о компиляторах, это должно увеличить привлекательность околокомпиляторных вакансий. Да, отдельные курсы про это читаются, но поздно (3-4 год бакалавриата), и если начать рассказывать про это пораньше, то больше человек будут этим интересоваться на практиках.

{:/comment}

[1]: https://blog.janestreet.com/oxidizing-ocaml-locality
[2]: https://blog.janestreet.com/oxidizing-ocaml-ownership
[3]: "Oxidizing OCaml with Modal Memory Management" A. Lorenzen, L. White, S. Dolan, R. Eisenberg, S. Lindley. https://homepages.inf.ed.ac.uk/slindley/papers/mode-inference-draft-feb2024.pdf
[4]: https://se.math.spbu.ru/thesis/slides/Gabdrahmanov_Azat_Rajnurovich_Autumn_practice_3rd_year_2023_slides.pdf
[5]: https://icfp23.sigplan.org/details/ocaml-2023-papers/8/Efficient-OCaml-compilation-with-Flambda-2
[6]: https://cyberleninka.ru/article/n/proekt-rusi-dlya-obucheniya-i-sozdaniya-vysokonadezhnyh-programmnyh-sistem
[7]: Intel Haskell Compiler  https://github.com/IntelLabs/flrc


