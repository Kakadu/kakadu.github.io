Заявка на доработку курса по компиляторам с использованием RISC-V
=================================================================


Данный курс читается на математико-механическом факультете СПбГУ для студентов 3 курса и является продолжением курса "Функциональное Программирование".
На этом курсе студенты изучают функциональный язык программирования OCaml и делают упражнения по написанию интерпретаторов различных языков.
В курсе "Трансляция языков программирования" студенты занимаются написанием компилятора небольшого подмножества функционального языка программирования OCaml на самом OCaml.

В изучения работы студенты реализуют компилятор, состоящий из следующих частей:

* Синтаксический анализ и проверка типов.
* Избавление от вложенных и анонимных функций.
* Трансляция в ANF представление, для облегчения последующей генерации кода.
* Компиляция с помощью инфраструктуры LLVM.
* Компиляция в ассемблер amd64 вручную, с помощью ассемблера nasm.
* Реализация библиотеки времени выполнения на языке Си, включая сборку мусора.

Некоторым недостатком данного курса является специализация на ассемблере amd64, так как эта подзадача является самой объемной из всех.
Поэтому, хочется продемнострировать обучающимся, что бывают другие языки ассемблера, например, используя RISC-V 64.

При добавлении ещё одной поддерживаемой архитектуры текущий курс должен существенно улучшиться.

* Студенты будут мотивированы вводить низкоуровневое представление скомпилированных программ, выделяя похожие части языков ассемблера amd64 и RISC-V 64, чтобы избегать дупликации кода.
* Появляется возможность продемонстрировать понятие retargetable compiler на практике.

Разработка компилятора для RISC-V позволит ярче раскрыть отличия различных микроархитектур процессоров друг от друга.
Например, станут естественными задачи по условному включению оптимизаций, связанных с битовыми манипуляциями (расширения ZBA и ZBB).
С их помощью обучающиеся смогут не только попробовать оптимизировать алгоритмы вычислительной математики, но и поэкспериментировать с представлениями данных в памяти в контексте написания сборщика мусора (например, реализовав не только теггированные целые числа как в OCaml, но и NaN-теггинг из Lua и SpiderMonkey).
Кто знает, возможно, в будущем задачи по сборке мусора станут более интересными после появления RISC-V расширения J.
