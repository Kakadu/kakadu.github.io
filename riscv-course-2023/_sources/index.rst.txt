Компиляторы, в том числе для RISC-V
===================================


Курс "Трансляция языков программирования" читается на математико-механическом факультете СПбГУ для студентов `специальности`_ "Программная инженерия" 3 курса (Бакалавриат 09.03.04).
Курс является обязательным и системообразующим, в 2023 году его должны сдавать 25 студентов.
Занятия ведутся 2 пары в неделю, кроме теоретического экзамена студентам необходимо сдавать домашнее задание по написанию на функциональном языке OCaml компилятора упрощенного OCaml.
(Курс "Функциональное программирование" на примере языка OCaml студенты сдают за год до курса по компиляторам.)
В материалах курса нет жесткой привязки к языку реализации компилятора, и их будет возможно переиспользовать для других специальностей.

Лекции состоят из общих вопросов по компиляции, и прикладных, непосредственно полезных в домашнем задании, 
которое они `сдают в репозитории на GitHub`_.
`Материалы`_ курса постепенно выкладываются в сеть.

На практических занятиях студенты реализуют компилятор, и состоящий из следующих частей:

* Синтаксический анализ и проверка типов.
* Избавление от вложенных и анонимных функций.
* Трансляция в ANF представление, для облегчения последующей генерации кода.
* Компиляция с помощью инфраструктуры LLVM.
* Компиляция в ассемблер amd64 вручную, с помощью ассемблера nasm.
* Реализация библиотеки времени выполнения на языке Си, включая сборку мусора.

Идея такого наполнения домашнего задания навеяна `курсом Д. Булычева`_ "Языки программирования и компиляторы".
В курсе не подразумевается, что будут выдаваться шаблоны конкретных частей домашнего задания, все студенты пишут компилятор одного и того же языка, парно и с нуля.

Некоторым недостатком данного курса является специализация на ассемблере amd64, так как эта подзадача является самой объемной из всех.
Поэтому, хочется продемнострировать обучающимся, что бывают другие языки ассемблера, например, используя RISC-V 64. К тому же в 2023 году появились студенты, пожелавшие реализовывать компилятор в архитектуру RISC-V 64 вместо amd64.

..  (На данный момент до выполнения этой задачи они ещё не дошли.)

При добавлении ещё одной поддерживаемой архитектуры текущий курс должен существенно улучшиться.

* Студенты будут мотивированы вводить низкоуровневое представление скомпилированных программ, выделяя похожие части языков ассемблера amd64 и RISC-V 64, чтобы избегать дупликации кода.
* Появляется возможность продемонстрировать понятие retargetable compiler на практике.

Разработка компилятора для RISC-V позволит ярче раскрыть отличия различных микроархитектур процессоров друг от друга.
Например, станут естественными задачи по условному включению оптимизаций, связанных с битовыми манипуляциями (расширения ZBA и ZBB).
С их помощью обучающиеся смогут не только попробовать оптимизировать алгоритмы вычислительной математики, но и поэкспериментировать с представлениями данных в памяти в контексте написания сборщика мусора (например, реализовав не только теггированные целые числа как в OCaml, но и NaN-теггинг из Lua и SpiderMonkey).

Разработка компиляторов является хорошо проработанной темой в научном сообществе, поэтому курс можно расширять множеством тем. Например:

* После появления RISC-V расширения J задачи по сборке мусора должны стать более интересными.
* Курс только теоретически затрагивает процесс проведения оптимизаций. С появлением новых процессорных инструкций, можно будет выделить отдельные и разные подзадачи по оптимизации программ.ж

.. _специальности: https://se.math.spbu.ru/bachelor/software-engineering.html
.. _курсом Д. Булычева: https://compscicenter.ru/courses/compilers/2021-spring
.. _сдают в репозитории на GitHub: https://github.com/Kakadu/comp23hw
.. _материалы: https://disk.yandex.ru/d/k9p_q6Y3jEm-Rg
