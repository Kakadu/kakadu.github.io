*******************************
Выбор инструкций в компиляторах
*******************************



Данные материалы задумывались как часть переработки и расширения курса по проектированию компиляторов,
где обучающиеся пишут свой компилятор простого языка программирования.
Как показывает опыт автора, студенты вполне способны сделать простое порождение инструкций (англ. instruction selection) не изучая ничего, если они знакомы с основами ассемблера целевой архитектуры.
В данном документе будут кратко изложена история исследования данной части компиляторов, и поведаны основные идеи, которые помогут заинтересованным студентам сделать "навороченный" выбор инструкций.

Никакой явной завязки на язык реализации, компилируемый язык или целевую архитектуру не задумывалось.

Информация подготовлена в основном на основе работ :cite:`Blindell2016,Blindell2018`.
В тех местах, где это уместно, были приведены примеры использования RISC-V инструкций.

Разработка данных учебных материалов поддержана в рамках конкурса грантов Альянса RISC-V.
Материалы допускаются к использованию под лицензией CC BY 4.0.

.. contents:: Оглавление
    :depth: 3

.. toctree::
   :maxdepth: 2

   intro
   020types
   030adt
   040cps
   041anf
   050ulc
   060hm
   998glossary



Заключение
=====================================================

:index:`commit`

.. glossary::


Вопросы для самопроверки
=====================================================

#. В архитектуре x86/amd64 присутствуют инструкции арифметических операций, а также инструкции ветвелния в зависмости от различных флагов переноса/переполнения, а эти флаги изменяются при выполнении арифметических операций. Какой категории инструкций относятся арифметические инструкции в x86/amd64?
    #. С единичным результатом
    #. С множественными результатами
    #. С не пересекающимися результатами
    #. Межблоковые
    #. Зависимые между собой

#. Какой метод выбора инструкций препочтителен для компиляции исходного кода на языках C#/Kotlin в представление платформ .NET/JVM? Поясните свой ответ
    #. На основе макросов
    #. На основе деревьев
    #. На основе графов без циклов
    #. На основе графов

#. Метод выбора инструкций А удачнее метода Б, потому что он позволяет смотреть на несколько инструкций целиком, а не по одной. Выберите наиболее подходящие А и Б (несколько вариантов).
    #. А = На основе графов, Б = на основе деревьев
    #. А = На основе деревьев, Б = на основе макросов
    #. А = На основе макросов, Б = на основе деревьев
    #. А = На основе графов с циклами и без, Б = на на основе макросов

#. Существует метод потимизации инстуркций, когда просматривается некоторое "окно" длиною в N инструкций, и в нём происходят упрощения и переупорядочивания. Такой метод называется ...
    #. peephole оптимизацией
    #. динамическое программирование
    #. супероптимизации
    #. на основе сопоставления с образцами
    #. на основе покрытия графов

#. Выберите правильное утверждение о "жадном" метода выбора инструкций на основе графа
    #. работает быстро, но дает неоптимальный результат
    #. работает медленно, и дает оптимальный результат
    #. работает быстро, и дает оптимальный результат
    #. некорректен для некоторых архитектур

#. Как называется операция, проверяющая, что сумма чисел не выходит за некоторую границу, и возвращающая максимальный результат про выходе за эту границу
    #. сложение с умножением (fused multiply-add)
    #. SIMD операция сложения
    #. сложение с насыщением.

#. В чем проблема осуществелния выбора инструкций на основе динамического программирования?
    #. Дает неоптимальный результат из-за особенностей метода
    #. Некорректен для некоторых архитектур
    #. Предположение, что из оптимальных решений частей задачи можно получить глобальное оптимальное решение -- не верно.

#. Что не так с выбором инструкций с помощью синтаксического анализа?
    #. Нет возможности принимать решения в зависимотси от конкретных констант.
    #. Размер грамматик слишком большой
    #. Наличие неконфликтной и поддерживаемой грамматики не гарантировано
    #. Всё выше перечисленное.

#. Что не так с выбором инструкций с помощью деревьев? (несколько вариантов ответов)
    #. Не годятся для представления графа потока управления, поэтому стоит применять только на линейных участках
    #. Инструкции с множественными выходами и непересекающимся выходами плохо моделируются, так как у деревьев только один корень.
    #. Не эффективны, так как не могут представлять общие подвыражения.
    #. Всё выше перечисленное.

#. Что не так с выбором инструкций с помощью графов без циклов? (несколько вариантов ответов)
    #. Не годятся для представления графа потока управления, поэтому стоит применять только на линейных участках
    #. Инструкции с множественными выходами и непересекающимся выходами плохо моделируются, так как у деревьев только один корень.
    #. Не эффективны, так как не могут представлять общие подвыражения.
    #. Задача оптимального выора инструкций вычислительно сложнее, чем для деревьев.
    #. Всё выше перечисленное.

#. Что можно порекомендовать разработчикам компиляторов, если некоторые категории инструкций не ложатся в текущий алгоритм выбора инструкций? (несколько вариантов ответов)
    #. Использовать другой алгоритм выбора инструкций
    #. Не порождать инструкции данной категории
    #. Сделать отдельный проход для порождения инструкций данной категории


Библиография
=====================================================

.. bibliography::
   :all:
