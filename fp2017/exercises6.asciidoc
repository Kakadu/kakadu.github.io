:source-highlighter: pygments
:pygments-style: monokai
:local-css-style: pastie
:stylesheet: ./stylesheets/tufte.css

Задачи, выложенные к пятой неделе
=================================
:Author: Dmitrii Kosarev aka Kakadu
:email:  Dmitrii.Kosarev@protonmail.ch

Среди задач есть от М.Симуни (simuni@mail.ru). Можете свободно копировать и воспроизводить эти задачи, при условии сохранения ссылки на составителя.

=== Несколько задач про списки

. Даны два потенциально бесконечных списка. Опишите функцию с типом `[a] -> [a] -> [a]` которая сольет два списка в один.
Функция должна быть относительно "честной": если в одном из списком элемент стоит на конечной позиции, то он должен получиться
в результирующем списке на конечной позиции.

. Та же задача с тем же ограничением, только списков не два, а бесконечно много. Получивашаяся функцию должна иметь тип: `[[a]] -> [a]`

. Используя бесконечные списки найдите простые числа с помощью решета Эратосфена.
+
*ВНИМАНИЕ, СПОЙЛЕР*. Меня спрашивали в прошлый раз как это делать. О, это очень просто: нужная одна дополнительная функция, которая будет принимать список и фильтровать его хвост, проверяя делимость на голову.

. Задача от М.Симуни. Опишите `fives`, как бесконечный список [5,55,555,5555,...] – т.е. список из целых положительных чисел, у которых все цифры равны 5.
+
  - Пример вызова: `take 7 fives `
  - Ответ должен быть равен [5,55,555,5555,55555,555555,5555555]

=== Про исчисление высказываний

Эта тема, являясь несложным упражнением про Haskell, имеет непосредственное отношение к тому, какие функции мы может описывать. Кроме того, у вас должен быть целый курс в будущем про эту "гадость", так что, чем раньше узнаете -- тем лучше.

. Описать тип данных для языка *исчисления высказываний*. Это относительно простой язык, где формулы это:
  - константы `True` и `False`;
  - именованые переменные, которые могут принимать значения `True` или `False`;
  - отрицания формул;
  - две другие формулы, соединенные бинарными связками: И (конъюнкция), ИЛИ (дизъюнкция) и импликация

. Формулы без перменных всегда вычисляются в одну из констант. Опишите функцию для такого вычисления. Поведение каждой из связок определяется соответствующей ей таблицей истинности.

. Формулы с переменными могут прининимать разные значения в зависимости от значений переменных в них. Формулы, которые при _некоторых_ значениях переменных  редуцируются в `True` называются _выполнимыми_. Формулы, которые редуцируются в `True` при _всех_ значениях переменных называются _общезначимыми_. Например,

  - формула modus ponens `(a ∧ (a ⇒ b)) ⇒ b`  общезначима.
  - `(a ⇒ b) ⇒ (b ⇒ a)` выполнима, но не общезначима: при `b ≡ True` и `a ≡ False` она обращается в `False`.
+
Реализуйтие проверки на выполнимость и общезначимость.

. У формул существуют канонические представления. Реализуйте преобразования в

  - https://en.wikipedia.org/wiki/Conjunctive_normal_form[конъюнктивную нормальную форму];
  - https://en.wikipedia.org/wiki/Disjunctive_normal_form[дизъюнктивную нормальную форму];
  - https://en.wikipedia.org/wiki/Negation_normal_form[negation normal form]
